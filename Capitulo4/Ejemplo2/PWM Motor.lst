CCS PCM C Compiler, Version 5.015, 5967               12-jul-20 12:37

               Filename:   C:\Users\CQ43\Documents\Curso Pic CCS\21-30\PWM\PWM Motor\PWM Motor.lst

               ROM used:   1459 words (18%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           54 (15%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4C5
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,00
000D:  DATA D0,2B
000E:  DATA 4D,1D
000F:  DATA A0,12
0010:  DATA 75,10
0011:  DATA 00,00
0012:  DATA D0,37
0013:  DATA F2,31
0014:  DATA 65,37
0015:  DATA F4,30
0016:  DATA EA,32
0017:  DATA 3A,10
0018:  DATA A5,3A
0019:  DATA A5,12
001A:  DATA 20,00
*
00B3:  MOVLW  8E
00B4:  MOVWF  77
00B5:  MOVF   26,W
00B6:  MOVWF  78
00B7:  MOVF   25,W
00B8:  MOVWF  79
00B9:  CLRF   7A
00BA:  MOVF   78,F
00BB:  BTFSS  03.2
00BC:  GOTO   0C7
00BD:  MOVF   79,W
00BE:  MOVWF  78
00BF:  CLRF   79
00C0:  MOVLW  08
00C1:  SUBWF  77,F
00C2:  MOVF   78,F
00C3:  BTFSS  03.2
00C4:  GOTO   0C7
00C5:  CLRF   77
00C6:  GOTO   0CF
00C7:  BCF    03.0
00C8:  BTFSC  78.7
00C9:  GOTO   0CE
00CA:  RLF    79,F
00CB:  RLF    78,F
00CC:  DECF   77,F
00CD:  GOTO   0C7
00CE:  BCF    78.7
00CF:  RETURN
00D0:  MOVLW  80
00D1:  BTFSC  03.1
00D2:  XORWF  46,F
00D3:  CLRF   4B
00D4:  CLRF   4C
00D5:  MOVF   42,W
00D6:  MOVWF  4A
00D7:  MOVF   46,W
00D8:  XORWF  4A,F
00D9:  MOVF   41,W
00DA:  BTFSC  03.2
00DB:  GOTO   1C0
00DC:  MOVWF  49
00DD:  MOVWF  77
00DE:  MOVF   45,W
00DF:  BTFSC  03.2
00E0:  GOTO   1C9
00E1:  SUBWF  49,F
00E2:  BTFSC  03.2
00E3:  GOTO   165
00E4:  BTFSS  03.0
00E5:  GOTO   123
00E6:  MOVF   46,W
00E7:  MOVWF  4F
00E8:  BSF    4F.7
00E9:  MOVF   47,W
00EA:  MOVWF  4E
00EB:  MOVF   48,W
00EC:  MOVWF  4D
00ED:  CLRF   4C
00EE:  BCF    03.0
00EF:  RRF    4F,F
00F0:  RRF    4E,F
00F1:  RRF    4D,F
00F2:  RRF    4C,F
00F3:  DECFSZ 49,F
00F4:  GOTO   0ED
00F5:  BTFSS  4A.7
00F6:  GOTO   0FA
00F7:  BSF    4B.0
00F8:  GOTO   1DD
00F9:  BCF    4B.0
00FA:  BCF    49.0
00FB:  BSF    4B.4
00FC:  MOVLW  44
00FD:  MOVWF  04
00FE:  BCF    03.7
00FF:  GOTO   1F2
0100:  BCF    4B.4
0101:  BTFSC  4A.7
0102:  GOTO   10D
0103:  BTFSS  49.0
0104:  GOTO   118
0105:  RRF    4F,F
0106:  RRF    4E,F
0107:  RRF    4D,F
0108:  RRF    4C,F
0109:  INCF   77,F
010A:  BTFSC  03.2
010B:  GOTO   1D8
010C:  GOTO   118
010D:  BTFSC  4F.7
010E:  GOTO   11B
010F:  BCF    03.0
0110:  RLF    4C,F
0111:  RLF    4D,F
0112:  RLF    4E,F
0113:  RLF    4F,F
0114:  DECF   77,F
0115:  BTFSC  03.2
0116:  GOTO   1D8
0117:  GOTO   10D
0118:  BSF    4B.6
0119:  GOTO   185
011A:  BCF    4B.6
011B:  MOVF   42,W
011C:  MOVWF  4A
011D:  BTFSS  4A.7
011E:  GOTO   121
011F:  BSF    4F.7
0120:  GOTO   1D1
0121:  BCF    4F.7
0122:  GOTO   1D1
0123:  MOVF   45,W
0124:  MOVWF  49
0125:  MOVWF  77
0126:  MOVF   41,W
0127:  SUBWF  49,F
0128:  MOVF   42,W
0129:  MOVWF  4F
012A:  BSF    4F.7
012B:  MOVF   43,W
012C:  MOVWF  4E
012D:  MOVF   44,W
012E:  MOVWF  4D
012F:  CLRF   4C
0130:  BCF    03.0
0131:  RRF    4F,F
0132:  RRF    4E,F
0133:  RRF    4D,F
0134:  RRF    4C,F
0135:  DECFSZ 49,F
0136:  GOTO   12F
0137:  BTFSS  4A.7
0138:  GOTO   13C
0139:  BSF    4B.1
013A:  GOTO   1DD
013B:  BCF    4B.1
013C:  BCF    49.0
013D:  BSF    4B.5
013E:  MOVLW  48
013F:  MOVWF  04
0140:  BCF    03.7
0141:  GOTO   1F2
0142:  BCF    4B.5
0143:  BTFSC  4A.7
0144:  GOTO   14F
0145:  BTFSS  49.0
0146:  GOTO   15A
0147:  RRF    4F,F
0148:  RRF    4E,F
0149:  RRF    4D,F
014A:  RRF    4C,F
014B:  INCF   77,F
014C:  BTFSC  03.2
014D:  GOTO   1D8
014E:  GOTO   15A
014F:  BTFSC  4F.7
0150:  GOTO   15D
0151:  BCF    03.0
0152:  RLF    4C,F
0153:  RLF    4D,F
0154:  RLF    4E,F
0155:  RLF    4F,F
0156:  DECF   77,F
0157:  BTFSC  03.2
0158:  GOTO   1D8
0159:  GOTO   14F
015A:  BSF    4B.7
015B:  GOTO   185
015C:  BCF    4B.7
015D:  MOVF   46,W
015E:  MOVWF  4A
015F:  BTFSS  4A.7
0160:  GOTO   163
0161:  BSF    4F.7
0162:  GOTO   1D1
0163:  BCF    4F.7
0164:  GOTO   1D1
0165:  MOVF   46,W
0166:  MOVWF  4F
0167:  BSF    4F.7
0168:  MOVF   47,W
0169:  MOVWF  4E
016A:  MOVF   48,W
016B:  MOVWF  4D
016C:  BTFSS  4A.7
016D:  GOTO   172
016E:  BCF    4F.7
016F:  BSF    4B.2
0170:  GOTO   1DD
0171:  BCF    4B.2
0172:  CLRF   4C
0173:  BCF    49.0
0174:  MOVLW  44
0175:  MOVWF  04
0176:  BCF    03.7
0177:  GOTO   1F2
0178:  BTFSC  4A.7
0179:  GOTO   19B
017A:  MOVF   42,W
017B:  MOVWF  4A
017C:  BTFSS  49.0
017D:  GOTO   185
017E:  RRF    4F,F
017F:  RRF    4E,F
0180:  RRF    4D,F
0181:  RRF    4C,F
0182:  INCF   77,F
0183:  BTFSC  03.2
0184:  GOTO   1D8
0185:  BTFSS  4C.7
0186:  GOTO   196
0187:  INCF   4D,F
0188:  BTFSS  03.2
0189:  GOTO   196
018A:  INCF   4E,F
018B:  BTFSS  03.2
018C:  GOTO   196
018D:  INCF   4F,F
018E:  BTFSS  03.2
018F:  GOTO   196
0190:  RRF    4F,F
0191:  RRF    4E,F
0192:  RRF    4D,F
0193:  INCF   77,F
0194:  BTFSC  03.2
0195:  GOTO   1D8
0196:  BTFSC  4B.6
0197:  GOTO   11A
0198:  BTFSC  4B.7
0199:  GOTO   15C
019A:  GOTO   1BA
019B:  MOVLW  80
019C:  XORWF  4F,F
019D:  BTFSS  4F.7
019E:  GOTO   1A3
019F:  GOTO   1DD
01A0:  MOVF   46,W
01A1:  MOVWF  4A
01A2:  GOTO   1B0
01A3:  MOVF   42,W
01A4:  MOVWF  4A
01A5:  MOVF   4F,F
01A6:  BTFSS  03.2
01A7:  GOTO   1B0
01A8:  MOVF   4E,F
01A9:  BTFSS  03.2
01AA:  GOTO   1B0
01AB:  MOVF   4D,F
01AC:  BTFSS  03.2
01AD:  GOTO   1B0
01AE:  CLRF   77
01AF:  GOTO   1D1
01B0:  BTFSC  4F.7
01B1:  GOTO   1BA
01B2:  BCF    03.0
01B3:  RLF    4C,F
01B4:  RLF    4D,F
01B5:  RLF    4E,F
01B6:  RLF    4F,F
01B7:  DECFSZ 77,F
01B8:  GOTO   1B0
01B9:  GOTO   1D8
01BA:  BTFSS  4A.7
01BB:  GOTO   1BE
01BC:  BSF    4F.7
01BD:  GOTO   1D1
01BE:  BCF    4F.7
01BF:  GOTO   1D1
01C0:  MOVF   45,W
01C1:  MOVWF  77
01C2:  MOVF   46,W
01C3:  MOVWF  4F
01C4:  MOVF   47,W
01C5:  MOVWF  4E
01C6:  MOVF   48,W
01C7:  MOVWF  4D
01C8:  GOTO   1D1
01C9:  MOVF   41,W
01CA:  MOVWF  77
01CB:  MOVF   42,W
01CC:  MOVWF  4F
01CD:  MOVF   43,W
01CE:  MOVWF  4E
01CF:  MOVF   44,W
01D0:  MOVWF  4D
01D1:  MOVF   4F,W
01D2:  MOVWF  78
01D3:  MOVF   4E,W
01D4:  MOVWF  79
01D5:  MOVF   4D,W
01D6:  MOVWF  7A
01D7:  GOTO   210
01D8:  CLRF   77
01D9:  CLRF   78
01DA:  CLRF   79
01DB:  CLRF   7A
01DC:  GOTO   210
01DD:  CLRF   4C
01DE:  COMF   4D,F
01DF:  COMF   4E,F
01E0:  COMF   4F,F
01E1:  COMF   4C,F
01E2:  INCF   4C,F
01E3:  BTFSS  03.2
01E4:  GOTO   1EB
01E5:  INCF   4D,F
01E6:  BTFSS  03.2
01E7:  GOTO   1EB
01E8:  INCF   4E,F
01E9:  BTFSC  03.2
01EA:  INCF   4F,F
01EB:  BTFSC  4B.0
01EC:  GOTO   0F9
01ED:  BTFSC  4B.1
01EE:  GOTO   13B
01EF:  BTFSC  4B.2
01F0:  GOTO   171
01F1:  GOTO   1A0
01F2:  MOVF   00,W
01F3:  ADDWF  4D,F
01F4:  BTFSS  03.0
01F5:  GOTO   1FC
01F6:  INCF   4E,F
01F7:  BTFSS  03.2
01F8:  GOTO   1FC
01F9:  INCF   4F,F
01FA:  BTFSC  03.2
01FB:  BSF    49.0
01FC:  DECF   04,F
01FD:  MOVF   00,W
01FE:  ADDWF  4E,F
01FF:  BTFSS  03.0
0200:  GOTO   204
0201:  INCF   4F,F
0202:  BTFSC  03.2
0203:  BSF    49.0
0204:  DECF   04,F
0205:  MOVF   00,W
0206:  BTFSS  00.7
0207:  XORLW  80
0208:  ADDWF  4F,F
0209:  BTFSC  03.0
020A:  BSF    49.0
020B:  BTFSC  4B.4
020C:  GOTO   100
020D:  BTFSC  4B.5
020E:  GOTO   142
020F:  GOTO   178
0210:  RETURN
*
024D:  MOVF   41,W
024E:  BTFSC  03.2
024F:  GOTO   2BD
0250:  MOVWF  49
0251:  MOVF   45,W
0252:  BTFSC  03.2
0253:  GOTO   2BD
0254:  ADDWF  49,F
0255:  BTFSC  03.0
0256:  GOTO   25E
0257:  MOVLW  7F
0258:  SUBWF  49,F
0259:  BTFSS  03.0
025A:  GOTO   2BD
025B:  BTFSC  03.2
025C:  GOTO   2BD
025D:  GOTO   262
025E:  MOVLW  81
025F:  ADDWF  49,F
0260:  BTFSC  03.0
0261:  GOTO   2BD
0262:  MOVF   49,W
0263:  MOVWF  77
0264:  CLRF   78
0265:  CLRF   79
0266:  CLRF   7A
0267:  MOVF   42,W
0268:  MOVWF  4D
0269:  BSF    4D.7
026A:  MOVF   43,W
026B:  MOVWF  4C
026C:  MOVF   44,W
026D:  MOVWF  4B
026E:  MOVLW  18
026F:  MOVWF  49
0270:  CLRF   4A
0271:  BTFSS  4B.0
0272:  GOTO   28B
0273:  MOVF   48,W
0274:  ADDWF  7A,F
0275:  BTFSS  03.0
0276:  GOTO   27D
0277:  INCF   79,F
0278:  BTFSS  03.2
0279:  GOTO   27D
027A:  INCF   78,F
027B:  BTFSC  03.2
027C:  BSF    4A.7
027D:  MOVF   47,W
027E:  ADDWF  79,F
027F:  BTFSS  03.0
0280:  GOTO   284
0281:  INCF   78,F
0282:  BTFSC  03.2
0283:  BSF    4A.7
0284:  MOVF   46,W
0285:  MOVWF  43
0286:  BSF    43.7
0287:  MOVF   43,W
0288:  ADDWF  78,F
0289:  BTFSC  03.0
028A:  BSF    4A.7
028B:  RLF    4A,F
028C:  RRF    78,F
028D:  RRF    79,F
028E:  RRF    7A,F
028F:  RRF    4D,F
0290:  RRF    4C,F
0291:  RRF    4B,F
0292:  BCF    03.0
0293:  DECFSZ 49,F
0294:  GOTO   270
0295:  MOVLW  01
0296:  ADDWF  77,F
0297:  BTFSC  03.0
0298:  GOTO   2BD
0299:  BTFSC  78.7
029A:  GOTO   2A2
029B:  RLF    4D,F
029C:  RLF    7A,F
029D:  RLF    79,F
029E:  RLF    78,F
029F:  DECF   77,F
02A0:  BTFSC  03.2
02A1:  GOTO   2BD
02A2:  BTFSS  4D.7
02A3:  GOTO   2B3
02A4:  INCF   7A,F
02A5:  BTFSS  03.2
02A6:  GOTO   2B3
02A7:  INCF   79,F
02A8:  BTFSS  03.2
02A9:  GOTO   2B3
02AA:  INCF   78,F
02AB:  BTFSS  03.2
02AC:  GOTO   2B3
02AD:  RRF    78,F
02AE:  RRF    79,F
02AF:  RRF    7A,F
02B0:  INCF   77,F
02B1:  BTFSC  03.2
02B2:  GOTO   2BD
02B3:  MOVF   42,W
02B4:  MOVWF  4A
02B5:  MOVF   46,W
02B6:  XORWF  4A,F
02B7:  BTFSS  4A.7
02B8:  GOTO   2BB
02B9:  BSF    78.7
02BA:  GOTO   2C1
02BB:  BCF    78.7
02BC:  GOTO   2C1
02BD:  CLRF   77
02BE:  CLRF   78
02BF:  CLRF   79
02C0:  CLRF   7A
*
02EB:  MOVF   41,W
02EC:  BTFSC  03.2
02ED:  GOTO   3B0
02EE:  MOVWF  4D
02EF:  MOVF   45,W
02F0:  BTFSC  03.2
02F1:  GOTO   3B0
02F2:  SUBWF  4D,F
02F3:  BTFSS  03.0
02F4:  GOTO   2FA
02F5:  MOVLW  7F
02F6:  ADDWF  4D,F
02F7:  BTFSC  03.0
02F8:  GOTO   3B0
02F9:  GOTO   300
02FA:  MOVLW  81
02FB:  SUBWF  4D,F
02FC:  BTFSS  03.0
02FD:  GOTO   3B0
02FE:  BTFSC  03.2
02FF:  GOTO   3B0
0300:  MOVF   4D,W
0301:  MOVWF  77
0302:  CLRF   78
0303:  CLRF   79
0304:  CLRF   7A
0305:  CLRF   4C
0306:  MOVF   42,W
0307:  MOVWF  4B
0308:  BSF    4B.7
0309:  MOVF   43,W
030A:  MOVWF  4A
030B:  MOVF   44,W
030C:  MOVWF  49
030D:  MOVLW  19
030E:  MOVWF  4D
030F:  MOVF   48,W
0310:  SUBWF  49,F
0311:  BTFSC  03.0
0312:  GOTO   323
0313:  MOVLW  01
0314:  SUBWF  4A,F
0315:  BTFSC  03.0
0316:  GOTO   323
0317:  SUBWF  4B,F
0318:  BTFSC  03.0
0319:  GOTO   323
031A:  SUBWF  4C,F
031B:  BTFSC  03.0
031C:  GOTO   323
031D:  INCF   4C,F
031E:  INCF   4B,F
031F:  INCF   4A,F
0320:  MOVF   48,W
0321:  ADDWF  49,F
0322:  GOTO   355
0323:  MOVF   47,W
0324:  SUBWF  4A,F
0325:  BTFSC  03.0
0326:  GOTO   33E
0327:  MOVLW  01
0328:  SUBWF  4B,F
0329:  BTFSC  03.0
032A:  GOTO   33E
032B:  SUBWF  4C,F
032C:  BTFSC  03.0
032D:  GOTO   33E
032E:  INCF   4C,F
032F:  INCF   4B,F
0330:  MOVF   47,W
0331:  ADDWF  4A,F
0332:  MOVF   48,W
0333:  ADDWF  49,F
0334:  BTFSS  03.0
0335:  GOTO   355
0336:  INCF   4A,F
0337:  BTFSS  03.2
0338:  GOTO   355
0339:  INCF   4B,F
033A:  BTFSS  03.2
033B:  GOTO   355
033C:  INCF   4C,F
033D:  GOTO   355
033E:  MOVF   46,W
033F:  IORLW  80
0340:  SUBWF  4B,F
0341:  BTFSC  03.0
0342:  GOTO   354
0343:  MOVLW  01
0344:  SUBWF  4C,F
0345:  BTFSC  03.0
0346:  GOTO   354
0347:  INCF   4C,F
0348:  MOVF   46,W
0349:  IORLW  80
034A:  ADDWF  4B,F
034B:  MOVF   47,W
034C:  ADDWF  4A,F
034D:  BTFSS  03.0
034E:  GOTO   332
034F:  INCF   4B,F
0350:  BTFSS  03.2
0351:  GOTO   332
0352:  INCF   4C,F
0353:  GOTO   332
0354:  BSF    7A.0
0355:  DECFSZ 4D,F
0356:  GOTO   358
0357:  GOTO   363
0358:  BCF    03.0
0359:  RLF    49,F
035A:  RLF    4A,F
035B:  RLF    4B,F
035C:  RLF    4C,F
035D:  BCF    03.0
035E:  RLF    7A,F
035F:  RLF    79,F
0360:  RLF    78,F
0361:  RLF    4E,F
0362:  GOTO   30F
0363:  BTFSS  4E.0
0364:  GOTO   36B
0365:  BCF    03.0
0366:  RRF    78,F
0367:  RRF    79,F
0368:  RRF    7A,F
0369:  RRF    4E,F
036A:  GOTO   36E
036B:  DECF   77,F
036C:  BTFSC  03.2
036D:  GOTO   3B0
036E:  BTFSC  4E.7
036F:  GOTO   397
0370:  BCF    03.0
0371:  RLF    49,F
0372:  RLF    4A,F
0373:  RLF    4B,F
0374:  RLF    4C,F
0375:  MOVF   48,W
0376:  SUBWF  49,F
0377:  BTFSC  03.0
0378:  GOTO   383
0379:  MOVLW  01
037A:  SUBWF  4A,F
037B:  BTFSC  03.0
037C:  GOTO   383
037D:  SUBWF  4B,F
037E:  BTFSC  03.0
037F:  GOTO   383
0380:  SUBWF  4C,F
0381:  BTFSS  03.0
0382:  GOTO   3A6
0383:  MOVF   47,W
0384:  SUBWF  4A,F
0385:  BTFSC  03.0
0386:  GOTO   38E
0387:  MOVLW  01
0388:  SUBWF  4B,F
0389:  BTFSC  03.0
038A:  GOTO   38E
038B:  SUBWF  4C,F
038C:  BTFSS  03.0
038D:  GOTO   3A6
038E:  MOVF   46,W
038F:  IORLW  80
0390:  SUBWF  4B,F
0391:  BTFSC  03.0
0392:  GOTO   397
0393:  MOVLW  01
0394:  SUBWF  4C,F
0395:  BTFSS  03.0
0396:  GOTO   3A6
0397:  INCF   7A,F
0398:  BTFSS  03.2
0399:  GOTO   3A6
039A:  INCF   79,F
039B:  BTFSS  03.2
039C:  GOTO   3A6
039D:  INCF   78,F
039E:  BTFSS  03.2
039F:  GOTO   3A6
03A0:  INCF   77,F
03A1:  BTFSC  03.2
03A2:  GOTO   3B0
03A3:  RRF    78,F
03A4:  RRF    79,F
03A5:  RRF    7A,F
03A6:  MOVF   42,W
03A7:  MOVWF  4D
03A8:  MOVF   46,W
03A9:  XORWF  4D,F
03AA:  BTFSS  4D.7
03AB:  GOTO   3AE
03AC:  BSF    78.7
03AD:  GOTO   3B4
03AE:  BCF    78.7
03AF:  GOTO   3B4
03B0:  CLRF   77
03B1:  CLRF   78
03B2:  CLRF   79
03B3:  CLRF   7A
*
03CF:  MOVLW  8E
03D0:  MOVWF  77
03D1:  MOVF   25,W
03D2:  SUBWF  77,F
03D3:  MOVF   26,W
03D4:  MOVWF  79
03D5:  MOVF   27,W
03D6:  MOVWF  78
03D7:  BSF    79.7
03D8:  MOVF   77,F
03D9:  BTFSC  03.2
03DA:  GOTO   3E6
03DB:  BCF    03.0
03DC:  MOVF   79,F
03DD:  BTFSS  03.2
03DE:  GOTO   3E2
03DF:  MOVF   78,F
03E0:  BTFSC  03.2
03E1:  GOTO   3E6
03E2:  RRF    79,F
03E3:  RRF    78,F
03E4:  DECFSZ 77,F
03E5:  GOTO   3DB
03E6:  BTFSS  26.7
03E7:  GOTO   3ED
03E8:  COMF   78,F
03E9:  COMF   79,F
03EA:  INCF   78,F
03EB:  BTFSC  03.2
03EC:  INCF   79,F
03ED:  RETURN
*
0424:  MOVF   0B,W
0425:  MOVWF  26
0426:  BCF    0B.7
0427:  BSF    03.5
0428:  BSF    03.6
0429:  BSF    0C.7
042A:  BSF    0C.0
042B:  NOP
042C:  NOP
042D:  BCF    03.5
042E:  BCF    03.6
042F:  BTFSC  26.7
0430:  BSF    0B.7
0431:  BTFSC  03.0
0432:  GOTO   45B
0433:  BSF    03.6
0434:  MOVF   0C,W
0435:  ANDLW  7F
0436:  BCF    03.6
0437:  MOVWF  26
0438:  BSF    03.6
0439:  MOVF   0D,W
043A:  BCF    03.6
043B:  MOVWF  27
043C:  BSF    03.6
043D:  MOVF   0F,W
043E:  BCF    03.6
043F:  MOVWF  28
0440:  MOVF   26,W
0441:  MOVWF  29
0442:  CALL   400
0443:  MOVF   27,W
0444:  BSF    03.6
0445:  MOVWF  0D
0446:  BCF    03.6
0447:  MOVF   28,W
0448:  BSF    03.6
0449:  MOVWF  0F
044A:  BCF    03.6
044B:  MOVF   0B,W
044C:  MOVWF  29
044D:  BCF    0B.7
044E:  BSF    03.5
044F:  BSF    03.6
0450:  BSF    0C.7
0451:  BSF    0C.0
0452:  NOP
0453:  NOP
0454:  BCF    03.5
0455:  BCF    03.6
0456:  BTFSC  29.7
0457:  BSF    0B.7
0458:  DECFSZ 25,F
0459:  GOTO   45B
045A:  GOTO   47A
045B:  BSF    03.6
045C:  RLF    0C,W
045D:  RLF    0E,W
045E:  ANDLW  7F
045F:  BCF    03.6
0460:  MOVWF  26
0461:  BSF    03.6
0462:  MOVF   0D,W
0463:  BCF    03.6
0464:  MOVWF  27
0465:  BSF    03.6
0466:  MOVF   0F,W
0467:  BCF    03.6
0468:  MOVWF  28
0469:  MOVF   26,W
046A:  MOVWF  29
046B:  CALL   400
046C:  MOVF   27,W
046D:  BSF    03.6
046E:  MOVWF  0D
046F:  BCF    03.6
0470:  MOVF   28,W
0471:  BSF    03.6
0472:  MOVWF  0F
0473:  INCF   0D,F
0474:  BTFSC  03.2
0475:  INCF   0F,F
0476:  BCF    03.0
0477:  BCF    03.6
0478:  DECFSZ 25,F
0479:  GOTO   424
047A:  RETURN
047B:  MOVF   28,W
047C:  CLRF   78
047D:  SUBWF  27,W
047E:  BTFSC  03.0
047F:  GOTO   483
0480:  MOVF   27,W
0481:  MOVWF  77
0482:  GOTO   48F
0483:  CLRF   77
0484:  MOVLW  08
0485:  MOVWF  29
0486:  RLF    27,F
0487:  RLF    77,F
0488:  MOVF   28,W
0489:  SUBWF  77,W
048A:  BTFSC  03.0
048B:  MOVWF  77
048C:  RLF    78,F
048D:  DECFSZ 29,F
048E:  GOTO   486
048F:  RETURN
0490:  MOVF   78,W
0491:  MOVF   25,W
0492:  MOVWF  27
0493:  MOVLW  64
0494:  MOVWF  28
0495:  CALL   47B
0496:  MOVF   77,W
0497:  MOVWF  25
0498:  MOVF   78,W
0499:  MOVLW  30
049A:  BTFSS  03.2
049B:  GOTO   4A3
049C:  BTFSS  26.1
049D:  GOTO   4AA
049E:  BTFSC  26.3
049F:  GOTO   4AA
04A0:  BTFSC  26.4
04A1:  MOVLW  20
04A2:  GOTO   4A6
04A3:  BCF    26.3
04A4:  BCF    26.4
04A5:  BSF    26.0
04A6:  ADDWF  78,F
04A7:  MOVF   78,W
04A8:  MOVWF  29
04A9:  CALL   400
04AA:  MOVF   25,W
04AB:  MOVWF  27
04AC:  MOVLW  0A
04AD:  MOVWF  28
04AE:  CALL   47B
04AF:  MOVF   77,W
04B0:  MOVWF  25
04B1:  MOVF   78,W
04B2:  MOVLW  30
04B3:  BTFSS  03.2
04B4:  GOTO   4BB
04B5:  BTFSC  26.3
04B6:  GOTO   4BF
04B7:  BTFSS  26.0
04B8:  GOTO   4BF
04B9:  BTFSC  26.4
04BA:  MOVLW  20
04BB:  ADDWF  78,F
04BC:  MOVF   78,W
04BD:  MOVWF  29
04BE:  CALL   400
04BF:  MOVLW  30
04C0:  ADDWF  25,F
04C1:  MOVF   25,W
04C2:  MOVWF  29
04C3:  CALL   400
04C4:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC = 10 
.................... #fuses HS,NOWDT,NOPROTECT,NOPUT,NOLVP,BROWNOUT 
.................... #use delay(clock=20M) 
*
001B:  MOVLW  2A
001C:  MOVWF  04
001D:  BCF    03.7
001E:  MOVF   00,W
001F:  BTFSC  03.2
0020:  GOTO   02E
0021:  MOVLW  06
0022:  MOVWF  78
0023:  CLRF   77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 78,F
0027:  GOTO   023
0028:  MOVLW  7B
0029:  MOVWF  77
002A:  DECFSZ 77,F
002B:  GOTO   02A
002C:  DECFSZ 00,F
002D:  GOTO   021
002E:  RETURN
.................... #use standard_io(D) 
....................  
.................... #define LCD_DB4   PIN_D4         // Pines de la pantalla LCD 
.................... #define LCD_DB5   PIN_D5 
.................... #define LCD_DB6   PIN_D6 
.................... #define LCD_DB7   PIN_D7 
.................... #define LCD_RS    PIN_D2 
.................... #define LCD_E     PIN_D3 
.................... #include <LCD_16X2.c>            // Libreria para el manejo de la pantalla LCD 
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
002F:  BTFSC  31.0
0030:  GOTO   033
0031:  BCF    08.4
0032:  GOTO   034
0033:  BSF    08.4
0034:  BSF    03.5
0035:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
0036:  BCF    03.5
0037:  BTFSC  31.1
0038:  GOTO   03B
0039:  BCF    08.5
003A:  GOTO   03C
003B:  BSF    08.5
003C:  BSF    03.5
003D:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
003E:  BCF    03.5
003F:  BTFSC  31.2
0040:  GOTO   043
0041:  BCF    08.6
0042:  GOTO   044
0043:  BSF    08.6
0044:  BSF    03.5
0045:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
0046:  BCF    03.5
0047:  BTFSC  31.3
0048:  GOTO   04B
0049:  BCF    08.7
004A:  GOTO   04C
004B:  BSF    08.7
004C:  BSF    03.5
004D:  BCF    08.7
....................  
....................  delay_cycles(1); 
004E:  NOP
....................  output_high(LCD_E); 
004F:  BCF    08.3
0050:  BCF    03.5
0051:  BSF    08.3
....................  delay_us(2); 
0052:  MOVLW  02
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  GOTO   057
0057:  NOP
....................  output_low(LCD_E); 
0058:  BSF    03.5
0059:  BCF    08.3
005A:  BCF    03.5
005B:  BCF    08.3
005C:  RETURN
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................  
.................... output_high(LCD_E); 
.................... delay_cycles(1); 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................  
.................... output_low(LCD_E); 
....................  
.................... return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... delay_cycles(1); 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
005D:  BSF    03.5
005E:  BCF    08.2
005F:  BCF    03.5
0060:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
0061:  MOVLW  63
0062:  MOVWF  77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  GOTO   066
.................... #endif 
....................  
.................... if(address) 
0066:  MOVF   2E,F
0067:  BTFSC  03.2
0068:  GOTO   06E
....................    output_high(LCD_RS); 
0069:  BSF    03.5
006A:  BCF    08.2
006B:  BCF    03.5
006C:  BSF    08.2
006D:  GOTO   072
.................... else 
....................    output_low(LCD_RS); 
006E:  BSF    03.5
006F:  BCF    08.2
0070:  BCF    03.5
0071:  BCF    08.2
....................  
....................  delay_cycles(1); 
0072:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0073:  BSF    03.5
0074:  BCF    08.3
0075:  BCF    03.5
0076:  BCF    08.3
....................  
.................... lcd_send_nibble(n >> 4); 
0077:  SWAPF  2F,W
0078:  MOVWF  30
0079:  MOVLW  0F
007A:  ANDWF  30,F
007B:  MOVF   30,W
007C:  MOVWF  31
007D:  CALL   02F
.................... lcd_send_nibble(n & 0xf); 
007E:  MOVF   2F,W
007F:  ANDLW  0F
0080:  MOVWF  30
0081:  MOVWF  31
0082:  CALL   02F
0083:  RETURN
.................... } 
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0084:  BSF    03.5
0085:  BCF    08.2
0086:  BCF    03.5
0087:  BCF    08.2
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0088:  BSF    03.5
0089:  BCF    08.3
008A:  BCF    03.5
008B:  BCF    08.3
....................  
.................... delay_ms(15); 
008C:  MOVLW  0F
008D:  MOVWF  2A
008E:  CALL   01B
....................  
.................... for(i=0 ;i < 3; i++) 
008F:  CLRF   25
0090:  MOVF   25,W
0091:  SUBLW  02
0092:  BTFSS  03.0
0093:  GOTO   09C
....................    { 
....................     lcd_send_nibble(0x03); 
0094:  MOVLW  03
0095:  MOVWF  31
0096:  CALL   02F
....................     delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  2A
0099:  CALL   01B
009A:  INCF   25,F
009B:  GOTO   090
....................    } 
....................  
.................... lcd_send_nibble(0x02); 
009C:  MOVLW  02
009D:  MOVWF  31
009E:  CALL   02F
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
009F:  CLRF   25
00A0:  MOVF   25,W
00A1:  SUBLW  03
00A2:  BTFSS  03.0
00A3:  GOTO   0B0
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
00A4:  MOVF   25,W
00A5:  CALL   004
00A6:  MOVWF  26
00A7:  CLRF   2E
00A8:  MOVF   26,W
00A9:  MOVWF  2F
00AA:  CALL   05D
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
00AB:  MOVLW  05
00AC:  MOVWF  2A
00AD:  CALL   01B
....................     #endif 
00AE:  INCF   25,F
00AF:  GOTO   0A0
....................    } 
00B0:  BCF    0A.3
00B1:  BCF    0A.4
00B2:  GOTO   4D4 (RETURN)
....................  
.................... } 
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
03EE:  DECFSZ 2B,W
03EF:  GOTO   3F1
03F0:  GOTO   3F4
....................    address = lcd_line_two; 
03F1:  MOVLW  40
03F2:  MOVWF  2C
03F3:  GOTO   3F5
.................... else 
....................    address=0; 
03F4:  CLRF   2C
....................  
.................... address += x-1; 
03F5:  MOVLW  01
03F6:  SUBWF  2A,W
03F7:  ADDWF  2C,F
.................... lcd_send_byte(0, 0x80 | address); 
03F8:  MOVF   2C,W
03F9:  IORLW  80
03FA:  MOVWF  2D
03FB:  CLRF   2E
03FC:  MOVF   2D,W
03FD:  MOVWF  2F
03FE:  CALL   05D
03FF:  RETURN
.................... } 
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
0400:  MOVF   29,W
0401:  XORLW  0C
0402:  BTFSC  03.2
0403:  GOTO   40B
0404:  XORLW  06
0405:  BTFSC  03.2
0406:  GOTO   413
0407:  XORLW  02
0408:  BTFSC  03.2
0409:  GOTO   419
040A:  GOTO   41E
....................    { 
....................     case '\f': 
....................       lcd_send_byte(0,1); 
040B:  CLRF   2E
040C:  MOVLW  01
040D:  MOVWF  2F
040E:  CALL   05D
....................       delay_ms(2); 
040F:  MOVLW  02
0410:  MOVWF  2A
0411:  CALL   01B
....................       break; 
0412:  GOTO   423
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
0413:  MOVLW  01
0414:  MOVWF  2A
0415:  MOVLW  02
0416:  MOVWF  2B
0417:  CALL   3EE
....................        break; 
0418:  GOTO   423
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0419:  CLRF   2E
041A:  MOVLW  10
041B:  MOVWF  2F
041C:  CALL   05D
....................        break; 
041D:  GOTO   423
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
041E:  MOVLW  01
041F:  MOVWF  2E
0420:  MOVF   29,W
0421:  MOVWF  2F
0422:  CALL   05D
....................        break; 
....................    } 
0423:  RETURN
.................... } 
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
.................... void lcd_clear() 
.................... { 
....................   lcd_putc("\f"); 
.................... } 
....................  
.................... void send_D7_D4(int8 address_lcd,int8 nibble_lcd) 
.................... {   
....................   if((nibble_lcd & 1)==1) output_high(LCD_DB4); else output_low(LCD_DB4); 
....................   if((nibble_lcd & 2)==2) output_high(LCD_DB5); else output_low(LCD_DB5); 
....................   if((nibble_lcd & 4)==4) output_high(LCD_DB6); else output_low(LCD_DB6); 
....................   if((nibble_lcd & 8)==8) output_high(LCD_DB7); else output_low(LCD_DB7); 
....................    delay_us(60); 
....................    if(address_lcd) 
....................      output_high(LCD_RS); 
....................        
....................    else 
....................      output_low(LCD_RS);  
....................        
....................  output_high(LCD_E); 
....................  delay_us(2); 
....................  output_low(LCD_E); 
.................... } 
....................  
.................... void send_byte_data(int8 address_lcd, int8 n) 
.................... { 
....................    send_D7_D4(address_lcd,n >> 4); 
....................    send_D7_D4(address_lcd,n & 0xf); 
.................... } 
....................  
.................... void CGRAM_putc(int8 n) 
.................... { 
....................    send_byte_data(1,n); 
.................... } 
....................  
.................... void CGRAM_position(int p) 
.................... { 
....................   send_byte_data(0,0x40+p*8); 
.................... } 
....................  
.................... void CGRAM_create_char(char* new_char) 
.................... { 
....................   for(int cg=0; cg<=7;cg++) 
....................   { 
....................     send_byte_data(1,new_char[cg]); 
....................   } 
.................... } 
....................  
.................... #include <map_function.c>        // Libreria para hacer conversiones 
.................... // #include <map_function.c> 
....................  
.................... double map(float valor, float entradaMin, float entradaMax, float salidaMin, float salidaMax) 
.................... { 
....................    return((((valor-entradaMin)*(salidaMax-salidaMin))/(entradaMax-entradaMin))+salidaMin); 
*
0211:  BSF    03.1
0212:  MOVF   2C,W
0213:  MOVWF  44
0214:  MOVF   2B,W
0215:  MOVWF  43
0216:  MOVF   2A,W
0217:  MOVWF  42
0218:  MOVF   29,W
0219:  MOVWF  41
021A:  MOVF   30,W
021B:  MOVWF  48
021C:  MOVF   2F,W
021D:  MOVWF  47
021E:  MOVF   2E,W
021F:  MOVWF  46
0220:  MOVF   2D,W
0221:  MOVWF  45
0222:  CALL   0D0
0223:  MOVF   7A,W
0224:  MOVWF  40
0225:  MOVF   79,W
0226:  MOVWF  3F
0227:  MOVF   78,W
0228:  MOVWF  3E
0229:  MOVF   77,W
022A:  MOVWF  3D
022B:  BSF    03.1
022C:  MOVF   3C,W
022D:  MOVWF  44
022E:  MOVF   3B,W
022F:  MOVWF  43
0230:  MOVF   3A,W
0231:  MOVWF  42
0232:  MOVF   39,W
0233:  MOVWF  41
0234:  MOVF   38,W
0235:  MOVWF  48
0236:  MOVF   37,W
0237:  MOVWF  47
0238:  MOVF   36,W
0239:  MOVWF  46
023A:  MOVF   35,W
023B:  MOVWF  45
023C:  CALL   0D0
023D:  MOVF   40,W
023E:  MOVWF  44
023F:  MOVF   3F,W
0240:  MOVWF  43
0241:  MOVF   3E,W
0242:  MOVWF  42
0243:  MOVF   3D,W
0244:  MOVWF  41
0245:  MOVF   7A,W
0246:  MOVWF  48
0247:  MOVF   79,W
0248:  MOVWF  47
0249:  MOVF   78,W
024A:  MOVWF  46
024B:  MOVF   77,W
024C:  MOVWF  45
*
02C1:  MOVF   7A,W
02C2:  MOVWF  40
02C3:  MOVF   79,W
02C4:  MOVWF  3F
02C5:  MOVF   78,W
02C6:  MOVWF  3E
02C7:  MOVF   77,W
02C8:  MOVWF  3D
02C9:  BSF    03.1
02CA:  MOVF   34,W
02CB:  MOVWF  44
02CC:  MOVF   33,W
02CD:  MOVWF  43
02CE:  MOVF   32,W
02CF:  MOVWF  42
02D0:  MOVF   31,W
02D1:  MOVWF  41
02D2:  MOVF   30,W
02D3:  MOVWF  48
02D4:  MOVF   2F,W
02D5:  MOVWF  47
02D6:  MOVF   2E,W
02D7:  MOVWF  46
02D8:  MOVF   2D,W
02D9:  MOVWF  45
02DA:  CALL   0D0
02DB:  MOVF   40,W
02DC:  MOVWF  44
02DD:  MOVF   3F,W
02DE:  MOVWF  43
02DF:  MOVF   3E,W
02E0:  MOVWF  42
02E1:  MOVF   3D,W
02E2:  MOVWF  41
02E3:  MOVF   7A,W
02E4:  MOVWF  48
02E5:  MOVF   79,W
02E6:  MOVWF  47
02E7:  MOVF   78,W
02E8:  MOVWF  46
02E9:  MOVF   77,W
02EA:  MOVWF  45
*
03B4:  MOVF   7A,W
03B5:  MOVWF  40
03B6:  MOVF   79,W
03B7:  MOVWF  3F
03B8:  MOVF   78,W
03B9:  MOVWF  3E
03BA:  MOVF   77,W
03BB:  MOVWF  3D
03BC:  BCF    03.1
03BD:  MOVF   7A,W
03BE:  MOVWF  44
03BF:  MOVF   79,W
03C0:  MOVWF  43
03C1:  MOVF   78,W
03C2:  MOVWF  42
03C3:  MOVF   77,W
03C4:  MOVWF  41
03C5:  MOVF   38,W
03C6:  MOVWF  48
03C7:  MOVF   37,W
03C8:  MOVWF  47
03C9:  MOVF   36,W
03CA:  MOVWF  46
03CB:  MOVF   35,W
03CC:  MOVWF  45
03CD:  CALL   0D0
03CE:  RETURN
.................... } 
....................  
.................... long map16(int16 valor, int16 entradaMin, int16 entradaMax, int16 salidaMin, int16 salidaMax) 
.................... { 
....................    return((((valor-entradaMin)*(salidaMax-salidaMin))/(entradaMax-entradaMin))+salidaMin); 
.................... } 
....................  
....................  
.................... long valor_adc; 
.................... int valor_pwm; 
.................... int porcentaje; 
....................  
.................... void main() 
*
04C5:  MOVF   03,W
04C6:  ANDLW  1F
04C7:  MOVWF  03
04C8:  MOVLW  FF
04C9:  MOVWF  24
04CA:  BSF    03.5
04CB:  BSF    1F.0
04CC:  BSF    1F.1
04CD:  BSF    1F.2
04CE:  BCF    1F.3
04CF:  MOVLW  07
04D0:  MOVWF  1C
04D1:  BCF    03.7
.................... { 
....................    lcd_init(); 
04D2:  BCF    03.5
04D3:  GOTO   084
....................    setup_timer_2(t2_div_by_16, 255, 1); 
04D4:  MOVLW  00
04D5:  MOVWF  78
04D6:  IORLW  06
04D7:  MOVWF  12
04D8:  MOVLW  FF
04D9:  BSF    03.5
04DA:  MOVWF  12
....................    setup_ccp1(ccp_pwm); 
04DB:  BCF    03.5
04DC:  BCF    24.2
04DD:  MOVF   24,W
04DE:  BSF    03.5
04DF:  MOVWF  07
04E0:  BCF    03.5
04E1:  BCF    07.2
04E2:  MOVLW  0C
04E3:  MOVWF  17
....................    setup_ccp2(ccp_pwm); 
04E4:  BCF    24.1
04E5:  MOVF   24,W
04E6:  BSF    03.5
04E7:  MOVWF  07
04E8:  BCF    03.5
04E9:  BCF    07.1
04EA:  MOVLW  0C
04EB:  MOVWF  1D
....................    setup_adc_ports(AN0); 
04EC:  BSF    03.5
04ED:  BCF    1F.0
04EE:  BSF    1F.1
04EF:  BSF    1F.2
04F0:  BSF    1F.3
....................    setup_adc(adc_clock_internal); 
04F1:  BCF    1F.6
04F2:  BCF    03.5
04F3:  BSF    1F.6
04F4:  BSF    1F.7
04F5:  BSF    03.5
04F6:  BSF    1F.7
04F7:  BCF    03.5
04F8:  BSF    1F.0
....................    set_pwm1_duty(0);                // Motor PIN_C2 
04F9:  CLRF   15
....................    set_pwm2_duty(0);                // Led PIN_C1 
04FA:  CLRF   1B
....................     
....................    while(true) 
....................    { 
....................       set_adc_channel(0); 
04FB:  MOVLW  00
04FC:  MOVWF  78
04FD:  MOVF   1F,W
04FE:  ANDLW  C7
04FF:  IORWF  78,W
0500:  MOVWF  1F
....................       delay_us(2); 
0501:  MOVLW  02
0502:  MOVWF  77
0503:  DECFSZ 77,F
0504:  GOTO   503
0505:  GOTO   506
0506:  NOP
....................       valor_adc = read_adc(); 
0507:  BSF    1F.2
0508:  BTFSC  1F.2
0509:  GOTO   508
050A:  BSF    03.5
050B:  MOVF   1E,W
050C:  BCF    03.5
050D:  MOVWF  20
050E:  MOVF   1E,W
050F:  MOVWF  21
....................       valor_pwm = map(valor_adc, 0, 1023, 0, 255); 
0510:  MOVF   21,W
0511:  MOVWF  26
0512:  MOVF   20,W
0513:  MOVWF  25
0514:  CALL   0B3
0515:  MOVF   7A,W
0516:  MOVWF  28
0517:  MOVF   79,W
0518:  MOVWF  27
0519:  MOVF   78,W
051A:  MOVWF  26
051B:  MOVF   77,W
051C:  MOVWF  25
051D:  MOVF   7A,W
051E:  MOVWF  2C
051F:  MOVF   79,W
0520:  MOVWF  2B
0521:  MOVF   78,W
0522:  MOVWF  2A
0523:  MOVF   77,W
0524:  MOVWF  29
0525:  CLRF   30
0526:  CLRF   2F
0527:  CLRF   2E
0528:  CLRF   2D
0529:  CLRF   34
052A:  MOVLW  C0
052B:  MOVWF  33
052C:  MOVLW  7F
052D:  MOVWF  32
052E:  MOVLW  88
052F:  MOVWF  31
0530:  CLRF   38
0531:  CLRF   37
0532:  CLRF   36
0533:  CLRF   35
0534:  CLRF   3C
0535:  CLRF   3B
0536:  MOVLW  7F
0537:  MOVWF  3A
0538:  MOVLW  86
0539:  MOVWF  39
053A:  CALL   211
053B:  MOVF   7A,W
053C:  MOVWF  28
053D:  MOVF   79,W
053E:  MOVWF  27
053F:  MOVF   78,W
0540:  MOVWF  26
0541:  MOVF   77,W
0542:  MOVWF  25
0543:  CALL   3CF
0544:  MOVF   78,W
0545:  MOVWF  22
....................       porcentaje = map(valor_pwm, 0, 255, 0, 100); 
0546:  CLRF   26
0547:  MOVF   22,W
0548:  MOVWF  25
0549:  CALL   0B3
054A:  MOVF   7A,W
054B:  MOVWF  28
054C:  MOVF   79,W
054D:  MOVWF  27
054E:  MOVF   78,W
054F:  MOVWF  26
0550:  MOVF   77,W
0551:  MOVWF  25
0552:  MOVF   7A,W
0553:  MOVWF  2C
0554:  MOVF   79,W
0555:  MOVWF  2B
0556:  MOVF   78,W
0557:  MOVWF  2A
0558:  MOVF   77,W
0559:  MOVWF  29
055A:  CLRF   30
055B:  CLRF   2F
055C:  CLRF   2E
055D:  CLRF   2D
055E:  CLRF   34
055F:  CLRF   33
0560:  MOVLW  7F
0561:  MOVWF  32
0562:  MOVLW  86
0563:  MOVWF  31
0564:  CLRF   38
0565:  CLRF   37
0566:  CLRF   36
0567:  CLRF   35
0568:  CLRF   3C
0569:  CLRF   3B
056A:  MOVLW  48
056B:  MOVWF  3A
056C:  MOVLW  85
056D:  MOVWF  39
056E:  CALL   211
056F:  MOVF   7A,W
0570:  MOVWF  28
0571:  MOVF   79,W
0572:  MOVWF  27
0573:  MOVF   78,W
0574:  MOVWF  26
0575:  MOVF   77,W
0576:  MOVWF  25
0577:  CALL   3CF
0578:  MOVF   78,W
0579:  MOVWF  23
....................       set_pwm1_duty(valor_pwm); 
057A:  MOVF   22,W
057B:  MOVWF  15
....................       set_pwm2_duty(valor_pwm); 
057C:  MOVF   22,W
057D:  MOVWF  1B
....................        
....................       lcd_gotoxy(1,1); 
057E:  MOVLW  01
057F:  MOVWF  2A
0580:  MOVWF  2B
0581:  CALL   3EE
....................       printf(lcd_putc,"PWM: %u ",valor_pwm); 
0582:  MOVLW  0D
0583:  BSF    03.6
0584:  MOVWF  0D
0585:  MOVLW  00
0586:  MOVWF  0F
0587:  BCF    03.0
0588:  MOVLW  05
0589:  BCF    03.6
058A:  MOVWF  25
058B:  CALL   424
058C:  MOVF   22,W
058D:  MOVWF  25
058E:  MOVLW  1B
058F:  MOVWF  26
0590:  CALL   490
0591:  MOVLW  20
0592:  MOVWF  29
0593:  CALL   400
....................       lcd_gotoxy(1,2); 
0594:  MOVLW  01
0595:  MOVWF  2A
0596:  MOVLW  02
0597:  MOVWF  2B
0598:  CALL   3EE
....................       printf(lcd_putc,"Porcentaje: %u%% "porcentaje); 
0599:  MOVLW  12
059A:  BSF    03.6
059B:  MOVWF  0D
059C:  MOVLW  00
059D:  MOVWF  0F
059E:  BCF    03.0
059F:  MOVLW  0C
05A0:  BCF    03.6
05A1:  MOVWF  25
05A2:  CALL   424
05A3:  MOVF   23,W
05A4:  MOVWF  25
05A5:  MOVLW  1B
05A6:  MOVWF  26
05A7:  CALL   490
05A8:  MOVLW  25
05A9:  MOVWF  29
05AA:  CALL   400
05AB:  MOVLW  20
05AC:  MOVWF  29
05AD:  CALL   400
....................       delay_ms(50); 
05AE:  MOVLW  32
05AF:  MOVWF  2A
05B0:  CALL   01B
05B1:  GOTO   4FB
....................    } 
.................... } 
05B2:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
